<?php
require_once('../../_config.php');
?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<?php include_once($base_path.'/_include/common_header_part1.php'); ?>
<title>LocalJS: Thread Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
<link rel="stylesheet" type="text/css" href="<?php echo $yui_root; ?>fonts/fonts-min.css"/>
<link rel="stylesheet" type="text/css" href="<?php echo $yui_root; ?>grids/grids-min.css"/>
<?php include_once($base_path.'/_include/common_header_part2.php'); ?>
<!-- Generated by Doxygen 1.7.2 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Home</span></a></li>
      <li><a href="pages.php"><span>Getting&#160;Started</span></a></li>
      <li><a href="modules.php"><span>Modules</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.php"><span>Classes</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
          <span class="left">
            <form id="FSearchBox" action="search.php" method="get">
              <img id="MSearchSelect" src="search/mag.png" alt=""/>
              <input type="text" id="MSearchField" name="query" value="Search" size="20" accesskey="S" 
                     onfocus="searchBox.OnSearchFieldFocus(true)" 
                     onblur="searchBox.OnSearchFieldFocus(false)"/>
            </form>
          </span><span class="right"></span>
        </div>
      </li>
    </ul>
  </div>
  <div class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.php"><span>Class&#160;List</span></a></li>
      <li><a href="classes.php"><span>Class&#160;Index</span></a></li>
      <li><a href="functions.php"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-methods">Methods</a> &#124;
<a href="#properties">Properties</a>  </div>
  <div class="headertitle">
<h1>Thread Class Reference<br/>
<small>
[<a class="el" href="group___j_s_objects.php">LocalJS Objects (Advanced)</a>]</small>
</h1>  </div>
</div>
<div class="contents">
<!-- doxytag: class="Thread" -->
<p>Represent a script thread.  
<a href="#_details">More...</a></p>

<p><a href="class_thread-members.php">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Methods</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="interface_thread.php#aa4c7e8ce5147b0a22d6f2543c017a937">detach</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Detach the underlying thread apart from the <a class="el" href="interface_thread.php" title="Represent a script thread.">Thread</a> object.  <a href="#aa4c7e8ce5147b0a22d6f2543c017a937"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="interface_thread.php#a980d8518a01dac55c30b0fb2fb894eba">kill</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Force terminate the thread.  <a href="#a980d8518a01dac55c30b0fb2fb894eba"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="properties"></a>
Properties</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="interface_thread.php#a61ce2a4d4a93bba3bc16271882996fc4">handle</a><code> [get]</code></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">ReadOnly. Returns HANDLE to the thread.  <a href="#a61ce2a4d4a93bba3bc16271882996fc4"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="interface_thread.php#a7350fbd6ad10618f3b750b1f99ca5c3c">id</a><code> [get]</code></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">ReadOnly. Returns ID of the thread.  <a href="#a7350fbd6ad10618f3b750b1f99ca5c3c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">boolean&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="interface_thread.php#a2bb58b88ac256b165a95a806ae3b41e5">running</a><code> [get]</code></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">ReadOnly. Returns <code>true</code> if the thread is running, <code>false</code> if the thread has ended.  <a href="#a2bb58b88ac256b165a95a806ae3b41e5"></a><br/></td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>Represent a script thread. </p>
<p><a class="el" href="interface_thread.php" title="Represent a script thread.">Thread</a> object is created by method <a class="el" href="interface_threading.php#ab83b569dcb6b1ed35d6e9f13a8376a64" title="Create new script thread with optional arguments. Returns Thread object represents the new thread...">Threading.newThread</a>:</p>
<div class="fragment"><pre class="fragment">    var thr = <a class="code" href="interfacelocal_j_s.php" title="The root object of all advanced JavaScript objects. Available directly in JavaScript.">localJS</a>.<a class="code" href="interfacelocal_j_s.php#ac12d811a674c6cc7417b6f9a8d39736c" title="Readonly. Returns object Threading, which exposes methods to create new script thread, sleep, get thread id, etc.">threading</a>.<a class="code" href="interface_threading.php#ab83b569dcb6b1ed35d6e9f13a8376a64" title="Create new script thread with optional arguments. Returns Thread object represents the new thread...">newThread</a>(<span class="stringliteral">&quot;var var_in_thread = 1;&quot;</span>);
</pre></div><p>Refer to <a class="el" href="interface_thread.php#a2bb58b88ac256b165a95a806ae3b41e5" title="ReadOnly. Returns true if the thread is running, false if the thread has ended.">Thread.running</a> for a sample of wait until thread ends without blocking all <a class="el" href="interface_u_i.php" title="Open source object. Provides methods for common UI operations. Include localjs_ui.js to use it.">UI</a> actions.</p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="interface_threading.php#ab83b569dcb6b1ed35d6e9f13a8376a64" title="Create new script thread with optional arguments. Returns Thread object represents the new thread...">Threading.newThread</a> | <a class="el" href="interface_threading.php" title="Threading object exposes methods to create new script thread, sleep, get thread id, etc.">Threading</a> | <a class="el" href="interface_thread.php#a2bb58b88ac256b165a95a806ae3b41e5" title="ReadOnly. Returns true if the thread is running, false if the thread has ended.">Thread.running</a> </dd></dl>
<hr/><h2>Method Documentation</h2>
<a class="anchor" id="aa4c7e8ce5147b0a22d6f2543c017a937"></a><!-- doxytag: member="Thread::detach" ref="aa4c7e8ce5147b0a22d6f2543c017a937" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">detach </td>
          <td>(</td>
          <td class="paramname">&#160;)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Detach the underlying thread apart from the <a class="el" href="interface_thread.php" title="Represent a script thread.">Thread</a> object. </p>
<p>After a thread has been detached, accessing its properties generates an error, and call to methods <a class="el" href="interface_thread.php#a980d8518a01dac55c30b0fb2fb894eba">kill</a> and <a class="el" href="interface_thread.php#aa4c7e8ce5147b0a22d6f2543c017a937">detach</a> are ignored without error. The thread will run until script in thread exits (the thread terminates itself), or process ends (which is a forced termination). There is no more control to the underlying thread.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>This method doesn't return a value.</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="interface_threading.php#ab83b569dcb6b1ed35d6e9f13a8376a64" title="Create new script thread with optional arguments. Returns Thread object represents the new thread...">Threading.newThread</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a980d8518a01dac55c30b0fb2fb894eba"></a><!-- doxytag: member="Thread::kill" ref="a980d8518a01dac55c30b0fb2fb894eba" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">kill </td>
          <td>(</td>
          <td class="paramname">&#160;)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Force terminate the thread. </p>
<p>After a thread has been killed, accessing its properties generates an error, and call to methods <a class="el" href="interface_thread.php#a980d8518a01dac55c30b0fb2fb894eba">kill</a> and <a class="el" href="interface_thread.php#aa4c7e8ce5147b0a22d6f2543c017a937">detach</a> are ignored without error.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>This method doesn't return a value.</dd></dl>
<dl class="note"><dt><b>Note:</b></dt><dd>Kill a thread may cause resource taken by the thread not freed correctly.</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="interface_threading.php#ab83b569dcb6b1ed35d6e9f13a8376a64" title="Create new script thread with optional arguments. Returns Thread object represents the new thread...">Threading.newThread</a> </dd></dl>

</div>
</div>
<hr/><h2>Property Documentation</h2>
<a class="anchor" id="a61ce2a4d4a93bba3bc16271882996fc4"></a><!-- doxytag: member="Thread::handle" ref="a61ce2a4d4a93bba3bc16271882996fc4" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">long handle<code> [get]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>ReadOnly. Returns HANDLE to the thread. </p>
<p>The handle returned is the return value of <a href="http://msdn.microsoft.com/en-us/library/ms682453(VS.85).aspx" target="_blank">CreateThread Function</a>. Read property <a class="el" href="interface_thread.php#a61ce2a4d4a93bba3bc16271882996fc4">handle</a> after thread has been killed or detached generates an error.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>HANDLE to the thread.</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="interface_thread.php#aa4c7e8ce5147b0a22d6f2543c017a937" title="Detach the underlying thread apart from the Thread object.">Thread.detach</a> | <a class="el" href="interface_thread.php#a980d8518a01dac55c30b0fb2fb894eba" title="Force terminate the thread.">Thread.kill</a> | <a href="http://msdn.microsoft.com/en-us/library/ms682453(VS.85).aspx" target="_blank">CreateThread Function</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a7350fbd6ad10618f3b750b1f99ca5c3c"></a><!-- doxytag: member="Thread::id" ref="a7350fbd6ad10618f3b750b1f99ca5c3c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">long id<code> [get]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>ReadOnly. Returns ID of the thread. </p>
<p>Read property <a class="el" href="interface_thread.php#a7350fbd6ad10618f3b750b1f99ca5c3c">id</a> after thread has been killed or detached generates an error.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>ID of the thread.</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="interface_thread.php#aa4c7e8ce5147b0a22d6f2543c017a937" title="Detach the underlying thread apart from the Thread object.">Thread.detach</a> | <a class="el" href="interface_thread.php#a980d8518a01dac55c30b0fb2fb894eba" title="Force terminate the thread.">Thread.kill</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a2bb58b88ac256b165a95a806ae3b41e5"></a><!-- doxytag: member="Thread::running" ref="a2bb58b88ac256b165a95a806ae3b41e5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">boolean running<code> [get]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>ReadOnly. Returns <code>true</code> if the thread is running, <code>false</code> if the thread has ended. </p>
<p>Read property <a class="el" href="interface_thread.php#a2bb58b88ac256b165a95a806ae3b41e5">running</a> after thread has been killed or detached generates an error.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd><code>true</code> if the thread is running, <code>false</code> if the thread has ended.</dd></dl>
<p>Property <a class="el" href="interface_thread.php#a2bb58b88ac256b165a95a806ae3b41e5">running</a> can be used to wait for a thread ends:</p>
<div class="fragment"><pre class="fragment">    <span class="comment">// start the new thread:</span>
    var thread = <a class="code" href="interfacelocal_j_s.php" title="The root object of all advanced JavaScript objects. Available directly in JavaScript.">localJS</a>.<a class="code" href="interfacelocal_j_s.php#ac12d811a674c6cc7417b6f9a8d39736c" title="Readonly. Returns object Threading, which exposes methods to create new script thread, sleep, get thread id, etc.">threading</a>.<a class="code" href="interface_threading.php#ab83b569dcb6b1ed35d6e9f13a8376a64" title="Create new script thread with optional arguments. Returns Thread object represents the new thread...">newThread</a>(code_for_thread);
    <span class="keywordflow">while</span> (thread.running)
    {
        <span class="keywordflow">if</span> (!doEvents())
            <span class="keywordflow">break</span>;
    }
    <span class="comment">// thread ends.</span>
</pre></div><p><code>doEvents</code> is a JavaScript function keeping <a class="el" href="interface_u_i.php" title="Open source object. Provides methods for common UI operations. Include localjs_ui.js to use it.">UI</a> active by checking window messages, similar to <a href="http://msdn.microsoft.com/en-us/library/aa262728(VS.60).aspx" target="_blank">DoEvents Function</a> in Visual Basic 6. It can be found in samples. Defined below:</p>
<div class="fragment"><pre class="fragment"><span class="comment">// the goal of wrap up all code in an anonymous function is to make all local variable names having page scope</span>
<span class="comment">// if you want to hide the logic and make javascript/css files smaller for delivery, YUI compressor (http://developer.yahoo.com/yui/compressor/) is a very good tool, and FREE!</span>
<span class="comment">//</span>
<span class="comment">//  Define global function doEvents </span>
(function()
{
    var dllCall = <a class="code" href="interfacelocal_j_s.php" title="The root object of all advanced JavaScript objects. Available directly in JavaScript.">localJS</a>.<a class="code" href="interfacelocal_j_s.php#ac46dd82aca231ab33f6308ba12975594" title="Readonly. Returns object COM, which exposes methods to create COM object, connect COM events...">COM</a>.<a class="code" href="interface_c_o_m.php#a14285e3676c39b414cac2652046ec881" title="Create COM object by ProgID, optionally specify object location.">createObject</a>(<span class="stringliteral">&#39;DllCall&#39;</span>),
        addFunc = dllCall.add,
        newStruct = dllCall.newStruct;

    <span class="comment">//dllCall.checkAdd = GLOBAL_CHECK_ADD;</span>
    addFunc(<span class="stringliteral">&quot;user32.dll&quot;</span>, <span class="stringliteral">&quot;BOOL GetMessage(LPMSG lpMsg,HWND hWnd,UINT wMsgFilterMin,UINT wMsgFilterMax);&quot;</span>);
    addFunc(<span class="stringliteral">&quot;user32.dll&quot;</span>, <span class="stringliteral">&quot;BOOL TranslateMessage(const MSG *lpMsg);&quot;</span>);
    addFunc(<span class="stringliteral">&quot;user32.dll&quot;</span>, <span class="stringliteral">&quot;LRESULT DispatchMessage(const MSG *lpmsg);&quot;</span>);
    addFunc(<span class="stringliteral">&quot;user32.dll&quot;</span>, <span class="stringliteral">&quot;void PostQuitMessage(int nExitCode);&quot;</span>);
    addFunc(<span class="stringliteral">&quot;LocalJS.dll&quot;</span>, <span class="stringliteral">&quot;BOOL __stdcall translateBrowserAccelerator(LPMSG lpmsg);&quot;</span>);

    <span class="comment">// typedef struct {</span>
    <span class="comment">//  HWND hwnd;</span>
    <span class="comment">//  UINT message;</span>
    <span class="comment">//  WPARAM wParam;</span>
    <span class="comment">//  LPARAM lParam;</span>
    <span class="comment">//  DWORD time;</span>
    <span class="comment">//  POINT pt;</span>
    <span class="comment">// } MSG, *PMSG;</span>
    var msg = newStruct().addLong(<span class="stringliteral">&#39;hwnd&#39;</span>)
                    .addLong(<span class="stringliteral">&#39;message&#39;</span>)
                    .addLong(<span class="stringliteral">&#39;wParam&#39;</span>)
                    .addLong(<span class="stringliteral">&#39;lParam&#39;</span>)
                    .addLong(<span class="stringliteral">&#39;time&#39;</span>)
                    .add(newStruct().addLong(<span class="charliteral">&#39;x&#39;</span>).addLong(<span class="charliteral">&#39;y&#39;</span>), <span class="stringliteral">&#39;pt&#39;</span>),

        unloading = <span class="keyword">false</span>;

    window.attachEvent(<span class="stringliteral">&quot;onunload&quot;</span>, function()
    {
        unloading = <span class="keyword">true</span>;
    });

    <span class="comment">// doEvents is global variable</span>
    doEvents = function()
    {
        <span class="keywordflow">if</span> (unloading)
            <span class="keywordflow">return</span> <span class="keyword">false</span>;

        var ret = dllCall.GetMessage(msg, 0, 0, 0);

        <span class="comment">// a message loop is required for js code to run</span>
        <span class="keywordflow">if</span> (0 == ret) <span class="comment">// WM_QUIT</span>
        {
            dllCall.PostQuitMessage(msg.wParam);
            <span class="keywordflow">return</span> <span class="keyword">false</span>;
        }

        <span class="keywordflow">if</span> (ret &gt; 0)
        {
            <span class="keywordflow">if</span> (!dllCall.translateBrowserAccelerator(msg))
            {
                dllCall.TranslateMessage(msg);
                dllCall.DispatchMessage(msg);
            }
        };

        <span class="keywordflow">return</span> <span class="keyword">true</span>;
    };
})();
</pre></div><dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="interface_thread.php#aa4c7e8ce5147b0a22d6f2543c017a937" title="Detach the underlying thread apart from the Thread object.">Thread.detach</a> | <a class="el" href="interface_thread.php#a980d8518a01dac55c30b0fb2fb894eba" title="Force terminate the thread.">Thread.kill</a> | <a class="el" href="interface_dll_call.php" title="DllCall object enables JavaScript call functions exported by DLL or EXE files, including most Windows...">DllCall</a> | <a class="el" href="interface_dll_call.php#ab6730ea57a7678c1f07953ce331edca0" title="Add function exported by DLL or EXE file as a method of current DllCall object.">DllCall.add</a> | Script thread demostration </dd></dl>

</div>
</div>
</div>
<hr class="footer"/>
<?php include_once($base_path.'/_include/common_footer.php'); ?>
</html>
