# This configuration file is in JSON format. JSON is a very light format to describe data. Refer to www.json.org for detail.
#
# Lines starts with '#' are comments.
# Note that comments in not part of JSON definition; it's localJS configuration parser regonize comment lines.

{
	"dll_types":
#
# configuration for how to parse function prototype when add dll functions:
#
# localJS will try to determine the return type and parameter types from function prototype with rules like:
#
#	1. Parse function return type and parameter type declaration from function prototype, break each type declaration into words.
#
#	2. Replace macros with their replacement. macros are listed in 'MACROS' item below.
#
#	3. type 'long long' will be replaced by equivalent '__int64'.
#
#	4. If a '*' is found in type declaration, then this type is considered a pointer type.
#
#	5. If 'unsigned' is found in type declaration, then this type is considered unsigned.
#
#	6. For each type declaration, check each word against lists in this configuration for a case sensitive match.
#
#	7. If a match is not found, then
#		7.1 Words starts with '__' like '__in', '__out' are ignored.
#		7.2 Words starts with 'LP' or 'P', or ends with '_PTR' are considered a pointer type. So cases like POINT structure (passed by value) should be included in this configuration as a 8 bytes integer.
#		7.3 Words starts with 'H' are considered handles, which will be represented by a 4 bytes integer for 32 bits programs.
#
# **** THE ABOVE RULES COULD GUESS WRONG!!! ****
#
# **** For example, there is an enumeration type named PIPE_ATTRIBUTE_TYPE which starts by 'P' ****
# **** In this case, add PIPE_ATTRIBUTE_TYPE to type list for I4 then it will be fine. ****
#
# **** Another example is, type SECURITY_INFORMATION is defined as DWORD, so in order to regonize it, add SECURITY_INFORMATION to UI4 list ****
#
# **** In order to make sure everything go right, property dllCall.checkAdd is provided to popup functon prototype parsing result. ****
#
#		7.4 Other unregonized words will generate an error.
#
# **** If you modify this configuration, please be noted that enumerations should go under I4 ****
#
	{
		# words that match to 1 byte signed integer. If 'unsigned' is also found in the type declaration, then the integer is unsigned
		"I1" : ["INT8"],

		# words that match to 1 byte unsigned integer.
		"UI1" : ["bool", "byte", "BYTE", "UINT8"],

		# words that whose pointer is considered ansi string instead of 1 byte signed / unsigned integer
		"CHAR" : ["char", "CHAR", "UCHAR"],

		# words that match to 2 bytes signed integer. If 'unsigned' is also found in the type declaration, then the integer is unsigned
		"I2" : ["INT16", "short", "SHORT"],

		# words that match to 2 bytes unsigned integer.
		"UI2" : ["ATOM", "LANGID", "TBYTE", "UINT16", "USHORT", "WORD"],

		# words that whose pointer is considered wide string instead of 2 byte signed / unsigned integer, TCHAR are listed with WCHAR since WCHAR is our default string encoding.
		"WCHAR" : ["OLECHAR", "TCHAR", "wchar_t", "WCHAR"],

		# words that match to 4 bytes signed integer. If 'unsigned' is also found in the type declaration, then the integer is unsigned
		"I4" : ["BOOL", "GEOID", "HRESULT", "int", "INT", "INT32", "INT_PTR", "long", "LONG", "LONG_PTR", "LPARAM", "LRESULT", "LSTATUS",

		# enumerations are actually int, so listed enumerations here
				"AUDIT_EVENT_TYPE",
				"COMPUTER_NAME_FORMAT",
				"JOBOBJECTINFOCLASS",
				"LATENCY_TIME",
				"MONITOR_DISPLAY_STATE",
				"PARSEACTION", "POWER_ACTION", "PIPE_ATTRIBUTE_TYPE", "POWER_INFORMATION_LEVEL", "POWER_PLATFORM_ROLE", "POWER_REQUEST_TYPE",
				"SYSTEM_POWER_CONDITION", "SYSTEM_POWER_STATE",
				"TOKEN_INFORMATION_CLASS", "TOKEN_TYPE",
				"WELL_KNOWN_SID_TYPE"
				],

		# words that match to 4 bytes unsigned integer.
		"UI4" : ["DWORD", "DWORD_PTR", "size_t", "SIZE_T", "UINT", "UINT32", "UINT_PTR", "ULONG", "ULONG_PTR", "WPARAM",

		# there are some types are actually defined as DWORD by typedef
				"ACCESS_MASK", "ASSOCF",
				"CALID", "CALTYPE", "COLORREF",
				"EXECUTION_STATE",
				"GEOCLASS", "GEOTYPE",
				"LCID", "LGRPID",
				"NLS_FUNCTION",
				"SECURITY_INFORMATION"
				],

		# words that match to 8 bytes signed integer. If 'unsigned' is also found in the type declaration, then the integer is unsigned
		"I8" : ["__int64", "INT64", "LARGE_INTEGER", "LONG64", "LONGLONG"],

		# words that match to 8 bytes unsigned integer.
		"UI8" : ["DWORD64", "DWORDLONG", "POINT", "UINT64", "ULARGE_INTEGER", "ULONG64", "ULONGLONG"],

		# words that match to ANSI string (char *)
		"PSTR" : ["LPCSTR", "LPSTR", "PCSTR", "PSTR", "LPCCH", "LPCH", "PCCH", "PCH", "PCHAR", "NPSTR", "PZZSTR", "PCZZSTR", "PNZCH", "PCNZCH"],

		# words that match to wide string (WCHAR *). TCHAR types are listed with WCHAR types since WCHAR is our default string encoding.
		"PWSTR" : ["BSTR", "LPOLESTR", "LPCOLESTR",

					"PTCHAR", "LPTCH", "PTCH", "LPCTCH", "PCTCH", "PTSTR,", "LPTSTR", "PCTSTR,", "LPCTSTR", "PUTSTR,", "LPUTSTR", "PZZTSTR", "PCZZTSTR", "PUZZTSTR", "PCUZZTSTR", "PNZTCH", "PCNZTCH", "PUNZTCH", "PCUNZTCH",

					"PWCHAR", "LPWCH", "PWCH", "LPCWCH", "PCWCH", "PWSTR,", "LPWSTR", "PCWSTR,", "LPCWSTR", "PUWSTR,", "LPUWSTR", "LP", "PZZWSTR", "PCZZWSTR", "PUZZWSTR", "PCUZZWSTR", "PNZWCH", "PCNZWCH", "PUNZWCH", "PCUNZWCH",

					"NWPSTR", "LPCUWSTR", "PCUWSTR"],

		# words map to float
		"FLOAT" : ["float", "FLOAT"],

		# words map to double
		"DOUBLE" : ["double", "DOUBLE"],

		# words to be ignored:
		"IGNORED" : ["\"C\"", "const", "CONST", "extern", "EXTERN_C", "FAR", "NEAR", "volatile"],

		# words for void (function return type only)
		"VOID" : ["void", "VOID"],

		# words when used in function return type, means stdcall calling convention
		"STDCALL" : ["__stdcall", "APIENTRY", "APIPRIVATE", "CALLBACK", "FARPROC", "PASCAL", "STDAPICALLTYPE", "STDMETHODCALLTYPE", "WINAPI"],

		# words when used in function return type, means cdecl calling convention
		"CDECL" : ["__cdecl", "cdecl", "CDECL", "STDAPIVCALLTYPE", "STDMETHODVCALLTYPE", "WINAPIV"],
		
		# macros may appear in function prototype
		# NOTE: this is a map list instead of an array.
		"MACROS" : {
			# these are macros defined for stdcall found at winnt.h
			"STDAPI" 				: "EXTERN_C HRESULT STDAPICALLTYPE", 
			"STDMETHODIMP" 			: "HRESULT STDMETHODCALLTYPE",
			"STDOVERRIDEMETHODIMP"	: "__override STDMETHODIMP",
			"IFACEMETHODIMP"		: "__override STDMETHODIMP",
			
			# these are macros defined for cdecl found at winnt.h
			"STDAPIV"				: "EXTERN_C HRESULT STDAPIVCALLTYPE",
			"STDMETHODIMPV"			: "HRESULT STDMETHODVCALLTYPE",
			"STDOVERRIDEMETHODIMPV"	: "__override STDMETHODIMPV",
			"IFACEMETHODIMPV"		: "__override STDMETHODIMPV"
		}
	},

	"cdecl_dll":
#
# When declare a function to LocalJS, stdcall is the default calling convention.
# All windows api have stdcall calling conversion, so for windows api call, just leave calling convention default to stdcall.
#
# However, some dll export function in cdecl calling conversion, including C run time functions.
#
# To make it easier for user to specify calling conversion when declare a dll, this configuration item is created.
#
# If a dll is found in this list, then the default calling convention for functions exported from the dll will be cdecl. If stdcall is explictly specified when declare the function, the calling conversion is still stdcall.
#
# The dll name listed here are case insensitive.
# If a full filename is given when declare function, the filename part (without full path) will be matched against this list
#
	[ "MSVCRT.DLL", "MSVCRT10.DLL", "MSVCRT20.DLL", "MSVCRT40.DLL", "MSVCR70.DLL", "MSVCR71.DLL", "MSVCR80.DLL", "MSVCR90.DLL", "MSVCR100.DLL",
	  "MSVCP50.DLL", "MSVCP60.DLL", "MSVCP70.DLL", "MSVCP71.DLL", "MSVCP80.DLL", "MSVCP90.DLL", "MSVCP100.DLL" ]
}
